# Chat-privado-beta-1.2
mensajeria_app.py

import socket import threading import json

Diccionario para almacenar los usuarios registrados

usuarios = {}

Diccionario para almacenar mensajes eliminados

mensajes_eliminados = {}

def registrar_usuario(nombre, password): if nombre in usuarios: return False, "El usuario ya existe." usuarios[nombre] = password return True, "Usuario registrado con éxito."

def autenticar_usuario(nombre, password): if nombre in usuarios and usuarios[nombre] == password: return True, "Autenticación exitosa." return False, "Usuario o contraseña incorrectos."

def agregar_contacto(usuario, contacto): if usuario in usuarios and contacto in usuarios: return True, f"{contacto} añadido a tu lista de contactos." return False, "El contacto no existe."

def ver_mensajes_eliminados(usuario): return mensajes_eliminados.get(usuario, [])

def manejar_cliente(cliente_socket, direccion): try: while True: mensaje = cliente_socket.recv(1024).decode("utf-8") if not mensaje: break

datos = json.loads(mensaje)
        tipo = datos.get("tipo")
        usuario = datos.get("usuario")
        
        if tipo == "registrar":
            exito, respuesta = registrar_usuario(usuario, datos.get("password"))
        elif tipo == "autenticar":
            exito, respuesta = autenticar_usuario(usuario, datos.get("password"))
        elif tipo == "agregar_contacto":
            exito, respuesta = agregar_contacto(usuario, datos.get("contacto"))
        elif tipo == "ver_mensajes_eliminados":
            respuesta = ver_mensajes_eliminados(usuario)
            exito = True
        else:
            exito, respuesta = False, "Acción desconocida."
        
        cliente_socket.send(json.dumps({"exito": exito, "respuesta": respuesta}).encode("utf-8"))
except Exception as e:
    print(f"Error con el cliente {direccion}: {e}")
finally:
    cliente_socket.close()

def iniciar_servidor(puerto=12345): servidor = socket.socket(socket.AF_INET, socket.SOCK_STREAM) servidor.bind(("0.0.0.0", puerto)) servidor.listen(5) print(f"Servidor escuchando en el puerto {puerto}")

while True:
    cliente_socket, direccion = servidor.accept()
    print(f"Conexión entrante de {direccion}")
    hilo_cliente = threading.Thread(target=manejar_cliente, args=(cliente_socket, direccion))
    hilo_cliente.start()

if name == "main": iniciar_servidor()

